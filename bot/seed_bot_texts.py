#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤ –±–æ—Ç–∞ –∏–∑ JSON —Ñ–∞–π–ª–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python seed_bot_texts.py texts.json

–§–æ—Ä–º–∞—Ç JSON —Ñ–∞–π–ª–∞:
[
    {
        "text_name": "single_game_answer",
        "label": "–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–¥–∏–Ω–æ—á–Ω–æ–π –∏–≥—Ä—ã",
        "description": "–°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–¥–∏–Ω–æ—á–Ω–æ–π –∏–≥—Ä—ã",
        "unformatted_text": "üèÅ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! ..."
    },
    ...
]
"""

import json
import sys
import os
import asyncio
import aiohttp
from dotenv import load_dotenv
from pathlib import Path


load_dotenv(Path(__file__).parent.parent / '.env')


async def upload_texts(json_file_path: str):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ–∫—Å—Ç—ã –∏–∑ JSON —Ñ–∞–π–ª–∞ –≤ API."""
    
    # –ß–∏—Ç–∞–µ–º JSON —Ñ–∞–π–ª
    try:
        with open(json_file_path, 'r', encoding='utf-8') as f:
            texts = json.load(f)
    except FileNotFoundError:
        print(f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª {json_file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    except json.JSONDecodeError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON: {e}")
        return False
    
    if not isinstance(texts, list):
        print("–û—à–∏–±–∫–∞: JSON –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤")
        return False
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    api_url = os.getenv('API_URL', 'http://localhost:8000')
    system_token = os.getenv('BOT_SYSTEM_TOKEN') or os.getenv('BOT_TOKEN')
    
    if not system_token:
        print("–û—à–∏–±–∫–∞: –Ω–µ –∑–∞–¥–∞–Ω BOT_SYSTEM_TOKEN –∏–ª–∏ BOT_TOKEN")
        return False
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º payload
    payload = {'texts': texts}
    headers = {
        'Authorization': f'Token {system_token}',
        'Content-Type': 'application/json'
    }
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f'{api_url}/bot-texts/bulk-upsert/',
                json=payload,
                headers=headers
            ) as response:
                if response.status == 200:
                    result = await response.json()
                    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:")
                    print(f"   –°–æ–∑–¥–∞–Ω–æ: {result.get('created', 0)}")
                    print(f"   –û–±–Ω–æ–≤–ª–µ–Ω–æ: {result.get('updated', 0)}")
                    print(f"   –í—Å–µ–≥–æ: {result.get('total', 0)}")
                    return True
                else:
                    error_text = await response.text()
                    print(f"‚ùå –û—à–∏–±–∫–∞ {response.status}: {error_text}")
                    return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python seed_bot_texts.py <json_file>")
        print("–ü—Ä–∏–º–µ—Ä: python seed_bot_texts.py texts.json")
        sys.exit(1)
    
    json_file = sys.argv[1]
    print(f"–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤ –∏–∑ {json_file}...")
    
    success = asyncio.run(upload_texts(json_file))
    
    if success:
        print("üéâ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        sys.exit(0)
    else:
        print("üí• –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π")
        sys.exit(1)


if __name__ == '__main__':
    main()
