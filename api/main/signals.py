from django.db.models.signals import post_save
from django.dispatch import receiver
import asyncio
import os

from aiogram import Bot

from .models import PlanTeamQuiz, Team, BotText


@receiver(post_save, sender=PlanTeamQuiz)
def on_plan_team_quiz_created(sender, instance: PlanTeamQuiz, created: bool, **kwargs):
    if not created:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if not instance.send_notification:
        return
    
    # –ò—â–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ BotTexts
    try:
        bot_text = BotText.objects.get(text_name='team_quiz_notification')
        text = bot_text.unformatted_text
    except BotText.DoesNotExist:
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
        text = (
            "üì¢ –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–Ω–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ —É–∂–µ –¥–æ—Å—Ç—É–ø–Ω–∞!\n\n"
            "–°–µ–≥–æ–¥–Ω—è –≤–∞—Å –∂–¥—ë—Ç 6 —Å–≤–µ–∂–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Äî –æ–±—Å—É–¥–∏—Ç–µ, –ø–æ–¥—É–º–∞–π—Ç–µ –∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –∫–∞–∫ –µ–¥–∏–Ω–æ–µ —Ü–µ–ª–æ–µ! üß†‚ö°Ô∏è"
        )
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ chat_username –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
    team_chats = list(Team.objects.values_list('chat_username', flat=True))
    bot_token = os.getenv('BOT_TOKEN')
    if not bot_token or not team_chats:
        return

    async def _broadcast():
        bot = Bot(token=bot_token)
        try:
            for chat_username in team_chats:
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç –∫–æ–º–∞–Ω–¥—ã (chat_username –º–æ–∂–µ—Ç –±—ã—Ç—å @username –∏–ª–∏ chat_id)
                    if chat_username.startswith('@'):
                        await bot.send_message(chat_username, text, parse_mode='Markdown')
                    else:
                        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ username, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ chat_id
                        try:
                            chat_id = int(chat_username)
                            await bot.send_message(chat_id, text, parse_mode='Markdown')
                        except ValueError:
                            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ int, –ø—Ä–æ–±—É–µ–º –∫–∞–∫ username
                            await bot.send_message(f"@{chat_username}", text, parse_mode='Markdown')
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç {chat_username}: {e}")
                    continue
        finally:
            await bot.session.close()

    try:
        asyncio.create_task(_broadcast())
    except RuntimeError:
        loop = asyncio.new_event_loop()
        loop.run_until_complete(_broadcast())

